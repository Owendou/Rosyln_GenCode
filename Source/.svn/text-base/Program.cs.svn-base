using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.MSBuild;
using System.Xml.Serialization;
using System.IO;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;

namespace CodeGen
{
    class Program
    {
        //private static IEnumerable<string> GetReferences(string projectFileName)
        //{
        //    var projectInstance = new ProjectInstance(projectFileName);
        //    var result = BuildManager.DefaultBuildManager.Build(
        //        new BuildParameters(),
        //        new BuildRequestData(projectInstance, new[]
        //        {
        //            "ResolveProjectReferences",
        //            "ResolveAssemblyReferences"
        //        }));

        //    IEnumerable<string> GetResultItems(string targetName)
        //    {
        //        if (result.ResultsByTarget.ContainsKey(targetName))
        //        {
        //            var buildResult = result.ResultsByTarget[targetName];
        //            var buildResultItems = buildResult.Items;

        //            return buildResultItems.Select(item => item.ItemSpec);
        //        }
        //        else
        //        {
        //            return Enumerable.Empty<string>();
        //        }
        //    }

        //    return GetResultItems("ResolveProjectReferences")
        //        .Concat(GetResultItems("ResolveAssemblyReferences"));
        //}

        static void Main(string[] args)
        {
            if (args.Length == 1)
            {
                var workspace = MSBuildWorkspace.Create(new Dictionary<string, string> { { "CheckForSystemRuntimeDependency", "true" } });

                workspace.LoadMetadataForReferencedProjects = true;
                workspace.SkipUnrecognizedProjects = true;

                var solution = workspace.OpenSolutionAsync(args[0]).Result;

                foreach (var project in solution.Projects)
                {
                    var compilation = project.GetCompilationAsync().Result as CSharpCompilation;

                    //var refs = GetReferences(project.FilePath);

                    //List<MetadataReference> refList = new List<MetadataReference>();

                    //foreach (var item in refs)
                    //{
                    //    var metaRef = MetadataReference.CreateFromFile(item);

                    //    if (metaRef != null)
                    //    {
                    //        refList.Add(metaRef);
                    //    }
                    //    else
                    //    {
                    //        Console.WriteLine("MetadataReference.CreateFromFile failed");
                    //    }
                    //}

                    //compilation = compilation.AddReferences(refList);

                    if (compilation.GetTypeByMetadataName("System.Exception") != null)
                    {
                        Console.WriteLine("Get System.Exception success " + project.Name);
                    }
                    else
                    {
                        Console.WriteLine("Get System.Exception failed " + project.Name);
                    }
                }

                Console.ReadKey();

                return;
            }

            try
            {
                CodeGenConfig config = CodeGenConfig.Load("CodeGenConfig.xml");

                if (config.InterfaceItems.Count != 0 || config.ProxyClassItems.Count != 0)
                {
                    Console.WriteLine("正在生成代码");

                    using (CodeGenImpl codeGen = new CodeGenImpl(config))
                    {
                        codeGen.GenCode();
                    }
                }

                if (File.Exists(config.Cs2LuaReferenceFilePath))
                {
                    Console.WriteLine("正在检查外部引用是否都加上[LuaCallCSharp]");

                    using (ReferenceChecker refChecker = new ReferenceChecker(config))
                    {
                        refChecker.PerformCheck();
                    }
                }
            }
            catch (CodeGenException ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine("按任意键结束");
            Console.ReadKey();
        }
    }
}
